type: edu
custom_name: stage2
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.hyperskill.hstest.dynamic.DynamicTest;

    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        @DynamicTest
        CheckResult test1_checkCardCredentials() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String correctCardNumber = cardNumberMatcher.group();

            output = program.execute("1");
            cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String anotherCardNumber = cardNumberMatcher.group();

            if (anotherCardNumber.equals(correctCardNumber)) {
                return CheckResult.wrong("Your program generates two identical card numbers!");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkLogInAndLogOut() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return new CheckResult(false, "You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }
            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should be signed in after " +
                    "entering the correct card information.");
            }

            output = program.execute("2");

            if (!output.toLowerCase().contains("create")) {
                return new CheckResult(false, "The user should be logged out after choosing 'Log out' option.\n" +
                    "And you should print the menu with 'Create an account' option.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example!");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed in after" +
                    " entering incorrect card information.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test4_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number " +
                    "and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();

            Random random = new Random();

            String correctPin = pinMatcher.group().trim();
            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed" +
                    " in after entering the information of a non-existing card.");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test5_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("1");

            if (!output.contains("0")) {
                return new CheckResult(false, "Expected balance: 0");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLuhnAlgorithm() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            boolean isSomeCardFound = false;
            int foundCards = 0;

            while (cardNumberMatcher.find()) {

                foundCards++;

                if (!isSomeCardFound) {
                    isSomeCardFound = true;
                }

                String cardNumber = cardNumberMatcher.group();

                if (!checkLuhnAlgorithm(cardNumber)) {
                    return new CheckResult(false, String.format("The card number %s doesnâ€™t pass the Luhn algorithm.", cardNumber));
                }
            }

            if (!isSomeCardFound) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            if (foundCards != 20) {
                return new CheckResult(false, "Tried to generate 20 cards, but found " + foundCards);
            }

            return CheckResult.correct();
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }
    }
  learner_created: false
- name: src/banking/AccountCommandLineInterface.java
  visible: true
  text: |
    package banking;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class AccountCommandLineInterface implements AccountInterface {

        private static Scanner scanner = new Scanner(System.in);
        private static List<Account> accounts = new ArrayList<>();

        public void start() {

            int choice = mainMenuSelection();

            switch (choice) {
                case 1:
                    createAccount();
                    start();
                    break;
                case 2:
                    logIntoAccount();

                case 0:
                    System.out.println("\nBye!");
                    System.out.println("Created accounts:");
                    for (Account account: accounts) {
                        System.out.println(account);
                    }
                    break;
            }
        }


        public int mainMenuSelection() {

            int choice;

            while (true) {
                System.out.println("\n1. Create an account");
                System.out.println("2. Log into account");
                System.out.println("0. Exit");

                choice = scanner.nextInt();
                if (choice < 0 || choice > 2) {
                    System.out.println("Your choice is incorrect!");
                } else {
                    break;
                }
            }

            return choice;
        }

        public void createAccount() {

            Account account = new Account();
            accounts.add(account);

            System.out.println("\nYour card has been created\n" + "Your card number:\n" +
                    account.getCardNumber() + "\n" + "Your card PIN:\n" + account.getPin());
        }


        public void logIntoAccount() {

            Account currentAccount = null;

            System.out.println("\nEnter your card number:");
            String checkedCardNumber = scanner.next();

            for (Account account : accounts) {
                if (account.getCardNumber().equals(checkedCardNumber)) {
                    currentAccount = account;
                    break;
                }
            }

            if (currentAccount == null) {
                System.out.println("Wrong card number or PIN!");
                start();
            }

            System.out.println("Enter your PIN:");
            String checkedPin = scanner.next();

            if (currentAccount.getPin().equals(checkedPin)) {
                System.out.println("\nYou have successfully logged in!\n");
                accountMenuActions(currentAccount);
            } else {
                System.out.println("Wrong card number or PIN!");
                start();
            }
        }

        public int accountMenuSelections() {

            int choice;

            while (true) {
                System.out.println("1. Balance");
                System.out.println("2. Logout");
                System.out.println("0. Exit");

                choice = scanner.nextInt();
                if (choice < 0 || choice > 2) {
                    System.out.println("Your choice is incorrect!");
                } else {
                    break;
                }
            }

            return choice;
        }

        public void accountMenuActions(Account account) {

            int choice = accountMenuSelections();

            switch (choice) {
                case 1:
                    System.out.println("\nBalance : " + account.getBalance() + "\n");
                    accountMenuActions(account);
                    break;
                case 2:
                    System.out.println("\nYou have successfully logged out!");
                    start();
                    break;
                case 0:
                    System.out.println("Bye!");
                    break;
            }
        }
    }
  learner_created: true
- name: src/banking/Account.java
  visible: true
  text: |
    package banking;

    import java.util.Random;

    public class Account {

        private static final String CARD_BIN = "4000 00";
        private static final String CHECK_SUM = "7";
        private String cardNumber = "";
        private String pin = "";
        private int balance = 0;


        public Account() {

            cardNumber = generateCardNumber().replaceAll(" ", "");
            for (int i = 0; i < 4; i ++) {
                pin += String.valueOf(new Random().nextInt(9) + 1);
            }
        }

        public String getCardNumber() {
            return cardNumber;
        }

        public String getPin() {
            return pin;
        }

        public int getBalance() {
            return balance;
        }

        private String generateCardNumber() {

            String accountIdentifier = "";
            for (int i = 0; i < 9; i++) {
                accountIdentifier += String.valueOf(new Random().nextInt(9) + 1);
            }
            return CARD_BIN + accountIdentifier.substring(0, 2) + " " + accountIdentifier.substring(2, 6) + " " +
                    accountIdentifier.substring(6) + CHECK_SUM;
        }

        @Override
        public String toString() {
            return "Account{" +
                    "cardNumber='" + cardNumber + '\'' +
                    ", pin='" + pin + '\'' +
                    ", balance=" + balance +
                    '}';
        }
    }
  learner_created: true
- name: src/banking/AccountInterface.java
  visible: true
  text: |
    package banking;


    public interface AccountInterface {

        void start();

        int mainMenuSelection();

        void createAccount();

        void logIntoAccount();

        int accountMenuSelections();

        void accountMenuActions(Account account);
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/8426#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 29 Mar 2022 05:45:42 UTC
record: 2
